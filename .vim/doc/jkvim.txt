*jkvim.txt*                 Jivko's Vim Reference
*jkvim*

                   _ _       _                    _                          ~
                 (_|_)_   _| | _____      __   _(_)_ __ ___                  ~
                 | | \ \ / / |/ / _ \ ____\ \ / / | '_ ` _ \                 ~
                 | | |\ V /|   < (_) |_____\ V /| | | | | | |                ~
                _/ |_| \_/ |_|\_\___/       \_/ |_|_| |_| |_|                ~
               |__/                                                          ~
                                                                             ~
==============================================================================
CONTENTS                                                  *jkvim-contents*

   01. Intro ............................................. |jkvim-summary|
   02. Commands ......................................... |jkvim-commands|
   03. Plugins ........................................... |jkvim-plugins|

==============================================================================
SUMMARY                                                    *jkvim-summary*

Cheat-sheet for all vim-related.

==============================================================================
COMMANDS                                                  *jkvim-commands*

Lists frequently used commands and shortcuts.
NOTE: custom shortcuts are shown as surrounded with parentheses.
Leader key: comma (,)

=== Misc
:h :help some_topic
:q :quit Ctrl-W_q - quits current window
(,ss) - strip trailing whitespace

=== Buffers/Files
:e :edit            - opens file for editing
:w :write (,w)      - writes buffer to file
(,W)                - save file as root
:bp :bprevious (F3) - previous buffer
:bn :bnext (F4)     - next buffer

=== Windows - Ctrl-W
:new Ctrl-W_n        - creates new window and starts editing empty file
:c :close Ctrl-W_q   - closes current window
:sp :split Ctrl-W_s  - split current window in two, horizontally
:vs :vsplit Ctrl-W_v - split current window in two, vertically
Ctrl-W_arrows        - moves between windows
(,cd)                - Switch CWD to the directory of the open buffer

=== Tabs
:tabnew (,tn)
:tabclose (,tc)
:tabedit (,te)
:tabp (F3) - previous tab
:tabn (F4) - next tab

=== Searching
/
n - next match
N - previous match
:%s/SSS/RRR/g - searches SSS and replaces it with RRR
(*) (#) - searches for current selection and highlights matches
(,) - un-highlights previous matches

=== Folding
zc - close a fold
zo - open a fold
za - toggle a fold
zC, zO, zA - same as above but operating on all folding levels
zr - open one more level of folds throughout the buffer
zR - open all folds
zm - close one more lovel of folds throughout the buffer
zM - close all folds
zx - fixup current fold if it is broken for some reason
zX - fixup all folds

==============================================================================
PLUGINS                                                    *jkvim-plugins*

Describes used plugins and their behaviors / shortcuts


=== Plugin manager

=== Vundle
:h vundle
:PluginInstall - installs plugins configured in the .vimrc
:PluginInstall plugin_1 plugin_2 - installs specific plugins
:PluginInstall! :PluginUpdate - updates plugins
:PluginSearch foo - searches for foo in Vim Scripts (http://vim-scripts.org/vim/scripts.html)
:PluginList - Displays a list of installed bundles.


=== UI

=== vim-startify
Start screen with MRUs, sessions, bookmarks, etc.
:h startify-options
:h startify-commands
:Startify - shows the startup screen again
:SLoad    - load a session
:SSave    - save a session
:SDelete  - delete a session

=== vimux
tmux integration, runs shell commands
:help vimux

=== vim-airline
status line
:h airline
:AirlineToggle
:AirlineRefresh

=== vim-gitgutter
git diff in the gutter and stages/reverts hunks
Features:
* Shows signs for added, modified, and removed lines.
* Ensures signs are always as up to date as possible (but without running more than necessary).
* Quick jumping between blocks of changed lines ("hunks").
* Stage/revert/preview individual hunks.
* Optional line highlighting.
* Fully customisable (signs, sign column, line highlights, mappings, extra git-diff arguments, etc).
* Can be toggled on/off.
* Preserves signs from other plugins.
* Easy to integrate diff stats into status line; built-in integration with vim-airline.
Help:
:h gitgutter
:h GitGutterCommands
Usage:
:GitGutterDisable :GitGutterEnable :GitGutterToggle
:GitGutterSignsEnable :GitGutterSignsDisable :GitGutterSignsToggle
:GitGutterLineHighlightsEnable :GitGutterLineHighlightsDisable :GitGutterLineHighlightsToggle (,ht)
:GitGutterNextHunk (]c) - jump to next change
:GitGutterPrevHunk ([c) - jump to next change
:GitGutterStageHunk (,hs) - stage the hunk
:GitGutterRevertHunk (,hr) - revert the hunk
:GitGutterPreviewHunk (,hp) - preview hunk's changes

=== vim-fugitive
Git wrapper
Custom mappings:
:Gstatus (,gs)
:Gcommit (,gc)
(,ga) - adds everything and commits
:Gblame (,gb)
More help:
:h fugitive
:h Gstatus - for more keys during the status message

=== indent-guides
Displays indent levels
:IndentGuidesToggle (,ig) - toggles the indent guides on and off
:h indent-guide


=== Editing

=== snipmate.vim
snippets mgmt for various languages
:h snipMate

=== vim-table-mode
tables creation
:h table-mode.txt

=== tabular
text alignment
:h tabular
:Tabularize

=== ZoomWin
Zoom in/out of windows (toggle between one window and multi-window)
:ZoomWin <c-w>o : toggles the current window zooms into a full screen or the original set of windows

=== vim-multiple-cursors
Multiple selections
:h multiple-cursors-usage
Mappings:
C-n - pressing it selects the current word. Pressing it again finds the next matching occurence and selects it.
Note: If selection already exists prior to pressing C-n for the first time, it will be used instead.
C-p - removes the current virtual cursor and go back to the previous one - useful for uno-ing actions.
C-x - remove the current virtual cursor and skip to the next one.

=== EasyMotion
Speedy moving within the page text
:h easymotion
Example usage:
    Start with:
        <cursor>Lorem ipsum dolor sit amet.
    Type <Leader><Leader>w to trigger the word motion w. When the motion is triggered, the text is updated (no braces are actually added, the text is highlighted in red by default):
        <cursor>Lorem {a}psum {b}olor {c}it {d}met.
    Press c to jump to the beginning of the word "sit":
        Lorem ipsum dolor <cursor>sit amet.
    Similarly, if you're looking for an "o", you can use the f motion. Type <Leader><Leader>fo, and all "o" characters are highlighted:
        <cursor>L{a}rem ipsum d{b}l{c}r sit amet.
    Press b to jump to the second "o":
        Lorem ipsum d<cursor>olor sit amet.
Mappings:
    <Leader><Leader>f{char} | Find {char} to the right
    <Leader><Leader>F{char} | Find {char} to the left
    <Leader><Leader>s{char} | Find(Search) {char} forward and backward.
    <Leader><Leader>t{char} | Till before the {char} to the right
    <Leader><Leader>T{char} | Till after the {char} to the left
    <Leader><Leader>w       | Beginning of word forward
    <Leader><Leader>W       | Beginning of WORD forward
    <Leader><Leader>b       | Beginning of word backward
    <Leader><Leader>B       | Beginning of WORD backward
    <Leader><Leader>e       | End of word forward
    <Leader><Leader>E       | End of WORD forward
    <Leader><Leader>ge      | End of word backward.
    <Leader><Leader>gE      | End of WORD backward.
    <Leader><Leader>j       | Line downward
    <Leader><Leader>k       | Line upward
    <Leader><Leader>n       | Jump to latest "/" or "?" forward
    <Leader><Leader>N       | Jump to latest "/" or "?" backward

=== Surround
Surroundings: parentheses, brackets, quotes, XML tags, and more
:h surround
Examples. An asterisk (*) is used to denote the cursor position.
  Old text                  Command     New text
  "Hello *world!"           ds"         Hello world!
  [123+4*56]/2              cs])        (123+456)/2
  "Look ma, I'm *HTML!"     cs"<q>      <q>Look ma, I'm HTML!</q>
  if *x>3 {                 ysW(        if ( x>3 ) {
  my $str = *whee!;         vllllS'     my $str = 'whee!';
ds - delete surrounding
  Old text                  Command     New text ~
  "Hello *world!"           ds"         Hello world!
  (123+4*56)/2              ds)         123+456/2
  <div>Yo!*</div>           dst         Yo!
cs - change surrounding
  Old text                  Command     New text
  "Hello *world!"           cs"'        'Hello world!'
  "Hello *world!"           cs"<q>      <q>Hello world!</q>
  (123+4*56)/2              cs)]        [123+456]/2
  (123+4*56)/2              cs)[        [ 123+456 ]/2
  <div>Yo!*</div>           cst<p>      <p>Yo!</p>
ys - takes a valid Vim motion or text object as the first object, and wraps it using the second argument as with |cs|.
  Old text                  Command     New text
  Hello w*orld!             ysiw)       Hello (world)!
yss - operates on the current line, ignoring leading whitespace.
  Old text                  Command     New text
  Hello w*orld!             yssB        {Hello world!}
S - In visual mode, a simple "S" with an argument wraps the selection.

=== Repeat
Enable repeating supported plugin maps with "."
Supported plugins:
* surround.vim
* speeddating.vim
* abolish.vim
* unimpaired.vim
* commentary.vim
* vim-easyclip
Adding support to a plugin is generally as simple as the following command at the end of your map functions.
  silent! call repeat#set("\<Plug>MyWonderfulMap", v:count)

== Emmet
Emmet is an editor plugin for high-speed HTML, XML, XSL (or any other
structured code format) coding and editing. The core of this plugin is a
powerful abbreviation engine which allows you to expand expressions,
similar to CSS selectors, into HTML code:   div#page>div.logo+ul#navigation>li*5>a
Note: too much to list, just go to the help
:h emmet


=== Buffers/files

=== ctrlp.vim
Full path fuzzy file, buffer, mru, tag, ... finder
Basic Usage
* Run :CtrlP or :CtrlP [starting-directory] to invoke CtrlP in find file mode.
* Run :CtrlPBuffer or :CtrlPMRU to invoke CtrlP in find buffer or find MRU file mode.
* Run :CtrlPMixed to search in Files, Buffers and MRU files at the same time.
* Check :help ctrlp-commands and :help ctrlp-extensions for other commands.
Once CtrlP is open:
* Press <F5> to purge the cache for the current directory to get new files, remove deleted files and apply new ignore options.
* Press <c-f> and <c-b> to cycle between modes.
* Press <c-d> to switch to filename only search instead of full path.
* Press <c-r> to switch to regexp mode.
* Use <c-j>, <c-k> or the arrow keys to navigate the result list.
* Use <c-t> or <c-v>, <c-x> to open the selected entry in a new tab or in a new split.
* Use <c-n>, <c-p> to select the next/previous string in the prompt's history.
* Use <c-y> to create a new file and its parent directories.
* Use <c-z> to mark/unmark multiple files and <c-o> to open them.
Run :help ctrlp-mappings or submit ? in CtrlP for more mapping help.
* Submit two or more dots .. to go up the directory tree by one or multiple levels.
* End the input string with a colon : followed by a command to execute it on the opening file(s):
  - Use :25 to jump to line 25.
  - Use :diffthis when opening multiple files to run :diffthis on the first 4 files.

=== nerdtree
File tree explorer
:h NERDTree
:h NERDTreeBookmarkCommands
:h NERDTreeMappings
:NERDTreeToggle (F5) (,nt) - toggles the explorer on/off
:NERDTree /home/marty/vim7/src
:NERDTree foo - roots the tree at foo (foo is the name of a bookmark)
:NERDTreeFind - Find the current file in the tree
:NERDTreeCWD - Change tree root to current directory
Bookmarks:
:Bookmark <name> - bookmark the current node as <name>
:OpenBookmark <bookmark> - opens the bookmark - it must be a file
:ClearBookmarks [<bookmarks>]
:ClearAllBookmarks
Mappings:
:NERDTreeMapActivateNode (o,<cr>,mouse-click) - Open files, directories and bookmarks
go - Open selected file, but leave cursor in the NERDTree
:NERDTreeMapOpenInTab (t) - Open selected node/bookmark in a new tab
:NERDTreeMapOpenInTabSilent (T) - Same as 't' but keep the focus on the current tab
:NERDTreeMapOpenSplit (i) - Open selected file in a split window
(gi) - Same as i, but leave the cursor on the NERDTree
:NERDTreeMapOpenVSplit (s) - Open selected file in a new vsplit
(gs) - Same as s, but leave the cursor on the NERDTree
:NERDTreeMapOpenRecursively (O) - Recursively open the selected directory
:NERDTreeMapCloseDir (x) - Close the current nodes parent
:NERDTreeMapCloseChildren (X) - Recursively close all children of the current node
:NERDTreeMapDeleteBookmark (D) - Delete the current bookmark
:NERDTreeMapJumpRoot (P) - Jump to the root node
:NERDTreeMapJumpParent (p) - Jump to current nodes parent
:NERDTreeMapJumpFirstChild (K) - Jump up inside directories at the current tree depth
:NERDTreeMapJumpLastChild (J) - Jump down inside directories at the current tree depth
:NERDTreeMapJumpNextSibling <C-j>.-.Jump down to the next sibling of the current directory
:NERDTreeMapJumpPrevSibling <C-k>.-.Jump up to the previous sibling of the current directory
:NERDTreeMapChangeRoot (C) - Change the tree root to the selected dir
:NERDTreeMapUpdir (u) - Move the tree root up one directory
:NERDTreeMapUpdirKeepOpen (U) - Same as 'u' except the old root node is left open
:NERDTreeMapRefresh (r) - Recursively refresh the current directory
:NERDTreeMapRefreshRoot (R) - Recursively refresh the current root
:NERDTreeMapMenu (m) - Display the NERD tree menu - copy/move directories/files
:NERDTreeMapChdir (cd) - Change the CWD to the dir of the selected node
:NERDTreeMapCWD (CD) - Change tree root to the CWD
:NERDTreeMapToggleHidden (I) - Toggle whether hidden files displayed
:NERDTreeMapToggleFilters (f) - Toggle whether the file filters are used
:NERDTreeMapToggleFiles (F) - Toggle whether files are displayed
:NERDTreeMapToggleBookmarks (B) - Toggle whether the bookmark table is displayed
:NERDTreeMapQuit (q) - Close the NERDTree window
:NERDTreeMapToggleZoom (A) - Zoom (maximize/minimize) the NERDTree window
:NERDTreeMapHelp (?) - Toggle the display of the quick help

=== vim-scratch
Temporary scratch buffers
:Scratch  - open/edit the scratch buffer
:Sscratch - open the scratch buffer in a new split window

=== Code checking and formatting

=== syntastic
syntax checking
:h syntastic
:h syntastic-commands
:Errors
:SyntasticCheck
:SyntasticInfo
:SyntasticReset

=== nerdcommenter
comments mgmt
:h NERDCommenter
:h NERDComFunctionalitySummary
:h NERDComToggleComment
(,cc) - comments block
(,cu) - uncomments block
(,cm) - uses multipart delimiters if possible - as in /* ... */
(,ci) - inverts the comment state
(,cl) (,cr) - left/right alligned comments

=== Tagbar
Class outline viewer
:h tagbar
:h tagbar-usage
:TagbarToggle (F8)
:TagbarTogglePause - Freezes/Unfreezes the Tagbar window. Stops the contents of the window from changing when a different source file is selected.
Mappings:
:tagbar_map_help <F1>/? - Display key mapping help.
:tagbar_map_jump <cr>/<Enter> - Jump to the tag under the cursor
:tagbar_map_preview (p) - Jump to the tag under the cursor, but stay in the Tagbar window
:tagbar_map_previewwin (P) - Open the tag in a preview-window
<LeftMouse> - When on a fold icon, open or close the fold depending on the current state
<2-LeftMouse> Same as <CR>. See |g:tagbar_singleclick| if you want to use a single - instead of a double-click.
:tagbar_map_nexttag <C-N> - Go to the next top-level tag.
:tagbar_map_prevtag <C-P> - Go to the previous top-level tag.
:tagbar_map_showproto <Space> - Display the prototype of the current tag (i.e. the line defining it) in the command line.
:tagbar_map_hidenonpublic (v) - Hide tags that are declared non-public. Tags without any visibility information will still be shown.
:tagbar_map_openfold (+/zo) - Open the fold under the cursor.
:tagbar_map_closefold (-/zc) - Close the fold under the cursor or the current one if there is no fold under the cursor.
:tagbar_map_togglefold (o/za) - Toggle the fold under the cursor or the current one if there is no fold under the cursor.
:tagbar_map_openallfolds (*/zR) - Open all folds by setting foldlevel to 99.
:tagbar_map_closeallfolds (=/zM) - Close all folds by setting foldlevel to 0.
:tagbar_map_nextfold (zj) - Go to the start of the next fold, like the standard Vim |zj|.
:tagbar_map_prevfold (zk) - Go to the end of the previous fold, like the standard Vim |zk|.
:tagbar_map_togglesort (s) - Toggle sort order between name and file order.
:tagbar_map_toggleautoclose (c) - Toggle the |g:tagbar_autoclose| option.
:tagbar_map_zoomwin (x) - Toggle zooming the window.
:tagbar_map_close (q) - Close the Tagbar window.


=== Misc

=== ag.vim
Plugin for the_silver_searcher 'ag' - code-searching tool
:h ag.txt
:Ag[!] [options] {pattern} [{directory}]
:AgBuffer[!] [options] {pattern}
:AgFile [options] {pattern} [{directory}]
:AgHelp[!] [options] {pattern}
Mappings:
e - open file and close the quickfix window.
o - open file (same as enter).
go- preview file (open but maintain focus on ag.vim results).
t - open in a new tab.
T - open in new tab silently.
h - open in horizontal split.
H - open in horizontal split silently.
v - open in vertical split.
gv- open in vertical split silently.
q - close the quickfix window.

==============================================================================
vim:tw=78:ts=8:ft=help:norl:
